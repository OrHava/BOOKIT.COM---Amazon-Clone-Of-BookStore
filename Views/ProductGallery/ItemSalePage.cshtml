@model FirebaseLoginAuth.Models.BookProduct
<!DOCTYPE html>
<html lang="en">
<head>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">

    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Product Page</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f4;
        }

        .product-container {
            display: flex;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            border-radius: 8px;
            margin-bottom: 50px;
            overflow: hidden;
        }

        .image-container {
            flex: 1;
            text-align: center;
            width: 100px; /* Set your desired width */
            height: 200px; /* Set your desired height */
            overflow: hidden; /* Ensure the image stays within the container */
            border: 1px solid #ccc; /* Optional: Add border for clarity */
            display: flex; /* Ensure child elements (images) follow flexbox rules */
            align-items: center; /* Center vertically */
            justify-content: center; /* Center horizontally */
        }

            .image-container img {
                max-width: 100%;
                max-height: 100%;
                width: auto;
                height: auto;
                object-fit: contain; /* Maintain aspect ratio and fit inside the container */
            }


        .details-container {
            flex: 2;
            padding: 20px;
        }

        .price-container {
            flex: 1;
            padding: 20px;
            text-align: center;
        }

        .a-button {
            display: inline-block;
            padding: 10px 20px;
            border: none; /* Remove button border */
            border-radius: 5px;
            font-size: 16px;
            font-weight: bold;
            cursor: pointer;
            text-decoration: none;
            text-align: center;
            transition: background-color 0.3s;
            margin-right: 10px;
            margin-top: 10px;
        }

        .add-to-cart {
            background-color: rgba(255, 216, 20, 1);
            color: black;
        }

        .buy-now {
            background-color: rgba(255, 164, 28, 1);
            color: white;
        }

        .Notify-now {
            background-color: red; /* Change background color to red */
            color: white; /* Change text color to white */
            /* Add any additional styling you want for the button */
        }

        .a-button:hover {
            opacity: 0.8;
        }

        .author-info {
            margin-top: 10px;
            font-size: 14px;
            color: #555;
        }

        .price-container {
            display: flex;
            flex-direction: column;
        }

        .old-price {
            text-decoration: line-through;
            color: #999; /* Faded color for old price */
        }

        .price-difference {
            color: green; /* Green color for price difference */
            font-weight: bold;
        }


        .description {
            margin-top: 10px;
            text-align: justify;
            overflow: hidden;
            max-height: 100px; /* Show only a few lines initially */
            transition: max-height 0.5s ease;
        }

        .read-more {
            color: blue;
            border: none;
            cursor: pointer;
        }

        .price-info {
            font-size: 20px;
            margin-top: 20px;
        }

        .availability {
            margin-top: 10px;
            color: green; /* default to green */
        }

        .out-of-stock {
            color: red; /* change to red if out of stock */
        }

        .notification {
            background-color: #e5f3ff;
            color: #007bff;
            padding: 10px;
            margin-bottom: 10px;
            border-radius: 5px;
        }

      .old-price .old-price-value {
    text-decoration: line-through;
}

        .details {
            display: flex;
            justify-content: space-around; /* Adjust spacing for symmetry */
            align-items: center; /* Center items vertically */
            margin-top: 20px;
        }

        .detail-item {
            display: flex;
            justify-content: center; /* Center items horizontally */
            align-items: center; /* Center items vertically */
        }

            .detail-item span {
                margin-right: 10px;
                color: #666; /* Lighter shade of black */
                font-size: 16px;
            }

            .detail-item div {
                display: flex;
                flex-direction: column;
            }

            /* Style for icons */
            .detail-item i {
                font-size: 1.2em; /* Adjust icon size */
                color: #222; /* Lighter shade of black */
                display: flex; /* Make the icon container a flex container */
                justify-content: center; /* Center the icon horizontally */
                align-items: center; /* Center the icon vertically */
            }

            /* Style for text */
            .detail-item span {
                font-size: 16px;
                font-weight: bold;
                color: #222; /* Lighter shade of black */
                display: flex; /* Make the icon container a flex container */
                justify-content: center; /* Center the icon horizontally */
                align-items: center; /* Center the icon vertically */
            }

            .detail-item span2 {
                font-size: 16px;
                font-weight: bold;
                color: #666; /* Lighter shade of black */
                display: flex; /* Make the icon container a flex container */
                justify-content: center; /* Center the icon horizontally */
                align-items: center; /* Center the icon vertically */
            }



    </style>
</head>
<body>

    @if (!string.IsNullOrEmpty(TempData["NotificationMessage"] as string))
    {
        <div class="notification">
            @TempData["NotificationMessage"]
        </div>
    }
    @if (!string.IsNullOrEmpty(TempData["ErrorMessage"] as string))
    {
        <div class="notification">
            @TempData["ErrorMessage"]
        </div>
    }
    <div class="product-container">
        <div class="image-container">
            <img src="@Model.ImageUrl" alt="Book Image">
        </div>

        @if (Model.Format == "Softcover and Hardback")
        {
            <div class="image-container">
            <img src="@Model.SecondImageUrl" alt="Book Image 2">
            </div>
        }
        <div class="details-container">
            <h2>@Model.Name</h2>
            <p>Date of Release: @Model.ReleaseDateFormatted</p>
            <div class="author-info">
                <p class="rating">Sold Books: @Model.SoldBooks</p>
            </div>
            <div class="description" id="description">
                <p>Description: @Model.Description</p>
            </div>

            <button class="read-more" id="read-more-btn">Read More</button>



            <div class="details">
                <div class="detail-item">
                    <div>
                        <span2>Print Length</span2>
                        <span><i class="fas fa-book"></i></span>

                        <span>@Model.Pages</span>
                    </div>
                </div>
                <div class="detail-item">
                  
                    <div>
                        <span2>ISBN</span2>
                        <span><i class="fas fa-barcode"></i></span>
                        <span>@Model.ISBN</span>
                    </div>
                </div>
                <div class="detail-item">
          
                    <div>
                        <span2>Language</span2>
                        <span><i class="fas fa-language"></i></span>
                        <span>@Model.Language</span>
                    </div>
                </div>
                <div class="detail-item">
                  
                    <div>
                        <span2>Genre</span2>
                        <span><i class="fas fa-bookmark"></i></span>
                        <span>@Model.Genre</span>
                    </div>
                </div>
            </div>


        </div>
        <div class="price-container">
            <div class="price-info">
                @if (Model.IsBestseller == true)
                {
                    <p class="on-sale-label"> <strong>The Book is Best seller.</strong></p>
                }
                @if (Model.IsOnSell == true)
                {
                    <p class="on-sale-label">On Sale!</p>
                    <div class="price-container">
                        <div class="old-price">
                            <strong>Old Price:</strong> @(Model.OldPrice.HasValue ? "$" + Model.OldPrice.Value.ToString("0.00") : "N/A")
                        </div>
                        <div class="price">
                            <strong>Price:</strong> $@Model.Price
                        </div>
                        @if (Model.OldPrice.HasValue)
                        {
                            <div class="price-difference">
                                <strong>Save:</strong> $@(Model.OldPrice.Value - Model.Price)
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="price">
                        <strong>Price:</strong> $@Model.Price
                    </div>
                }

                @if (Model.NumberOfAvailability > 0)
                {
                    <p class="availability">@Model.NumberOfAvailability In Stock</p>
                }
                else
                {
                    <p class="availability out-of-stock">Out of Stock</p>
                }
            </div>
     
            @if (Model.NumberOfAvailability == 0)
            {
                <form method="post" action="@Url.Action("NotifyWhenAvailable", "User")">
                    <input type="hidden" name="bookId" value="@Model.BookId" />
                    <button type="submit" class="a-button Notify-now">Notify Me When Available</button>
                </form>
            }
            else
            {
                <a href="@Url.Action("ViewCart", "User", new { bookId = Model.BookId })" class="a-button add-to-cart">Add to Cart</a>

                <a href="@Url.Action("Index", "Payment", new { totalPrice =  Model.Price,bookId = Model.BookId })" class="a-button buy-now">Buy Now</a>
            }

        </div>
    </div>
    <h2>Product Details</h2>
    <div class="product-container">
   
        <div class="col-md-6">
            <p><strong>Author:</strong> @Model.Author</p>
            <p><strong>Publisher:</strong> @Model.Publisher</p>
            <p><strong>Country:</strong> @Model.Country</p>
            <p><strong>Dimensions:</strong> @Model.Dimensions</p>
            <p><strong>Weight:</strong> @Model.Weight</p>
            <p><strong>Edition:</strong> @Model.Edition</p>
            <p><strong>Format:</strong> @Model.Format</p>
            <p><strong>Age Limit:</strong> @Model.AgeLimitation</p>
        </div>

        </div>
    <script>
        const description = document.getElementById('description');
        const readMoreBtn = document.getElementById('read-more-btn');

        let isExpanded = false;

        readMoreBtn.addEventListener('click', () => {
            isExpanded = !isExpanded;

            if (isExpanded) {
                description.style.maxHeight = 'none';
                readMoreBtn.innerText = 'Show Less';
           
            } else {
                description.style.maxHeight = '100px'; // Show only a few lines
                readMoreBtn.innerText = 'Read More';
     
            }
        });



    </script>

</body>
</html>
